# -*- coding: utf-8 -*-
"""Denoising

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aHV0ln9JgL5LO7_VBF50KFvFi7cuxYRv
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import matplotlib.pyplot as plt
from scipy.io import wavfile

count =0;

def my_convolve(signal, kernel):
    N = signal.shape[0]
    K = kernel.shape[0]
    M = N + K - 1
    convolved_signal = np.zeros(M)
    for n in range(M):
        kmin = max(0, n - N + 1)
        kmax = min(K, n + 1)
        for k in range(kmin, kmax):
            convolved_signal[n] += signal[n-k] * kernel[k]
    return convolved_signal

# Loop through all audio recordings
for f in range(1,4):
    for s in range(1,5):
        for i in range(1, 5):
          # Load input audio signal
          fs, signal = wavfile.read(f"/content/drive/MyDrive/SNS Project/Raw Recordings/Sentence{s}_Member{i}_Frequency{f}.wav")
          if signal.ndim > 1:
            signal = np.mean(signal, axis=1)
          noise = np.random.randn(len(signal)) * 0.1  # Gaussian noise with standard deviation of 0.1
          noisy_signal = signal + noise

          # Define the convolution kernel for denoising
          kernel = np.array([1/16, 1/8, 1/16, 1/8, 1/4, 1/8, 1/16, 1/8, 1/16])

          # Perform convolution to denoise the signal
          denoised_signal = my_convolve(noisy_signal, kernel)

          # Save the denoised signal as a .wav file
          denoised_filename = f"/content/drive/MyDrive/SNS Project/Denoised signals/Sentence{s}_Member{i}_Frequency{f}.wav"
          wavfile.write(denoised_filename, fs, denoised_signal)

          # Plot the original signal, noisy signal, and denoised signal
          plt.figure(figsize=(6, 3))
          plt.plot(signal, label='Original Signal')
          plt.plot(noisy_signal, label='Noisy Signal')
          plt.plot(denoised_signal, label='Denoised Signal')
          plt.legend()
          plt.xlabel('Sample Index')
          plt.ylabel('Amplitude')
          plt.title(f'Denoising of Audio Recording Sentence{s}_Member{i}_Frequency{f}')
          plt.show()
          count=count+1
print("Total signals",count)